# import math
# import unittest
# from datetime import datetime

# from pydate import add_milliseconds


# class TestAddMilliseconds(unittest.TestCase):
#     """
#     test add_milliseconds - note this is autogenerated by chatGPT and needs to be verified
#     """

#     def test_add_milliseconds(self):
#         result = add_milliseconds(datetime(2014, 7, 10, 12, 45, 30, 0), 750)
#         expected = datetime(2014, 7, 10, 12, 45, 30, 750)
#         self.assertEqual(result, expected)

#     def test_accepts_timestamp(self):
#         timestamp = datetime(2014, 7, 10, 12, 45, 30, 0)
#         result = add_milliseconds(timestamp, 500)
#         expected = datetime(2014, 7, 10, 12, 45, 30, 500)
#         self.assertEqual(result, expected)

#     def test_does_not_mutate_original_date(self):
#         date = datetime(2014, 7, 10, 12, 45, 30, 0)
#         add_milliseconds(date, 250)
#         expected = datetime(2014, 7, 10, 12, 45, 30, 0)
#         self.assertEqual(date, expected)

#     def test_returns_invalid_date_if_given_date_is_invalid(self):
#         result = add_milliseconds(datetime.fromtimestamp(float("nan")), 750)
#         self.assertTrue(math.isnan(result.timestamp()))

#     # def test_returns_invalid_date_if_given_amount_is_nan(self):
#     #     result = add_milliseconds(datetime(2014, 7, 10, 12, 45, 30, 0), float("nan"))
#     #     self.assertTrue(math.isnan(result.timestamp()))
